//---------------------------Booting and Ending--------------------------

//This .dic file is set aside for booting and ending dialogue, as well as a few other functions. Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html), in particular the page about SakuraScript, for more details about how to properly format ghost dialogue! I don't want to have to repeat myself in every .dic file we go through, we'll both get tired of that by the time we're through, haha.
//I will however reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//Much of this file you will only have to set up once, so take heart!


//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//--A Note about Functions--
//A function that begins with On, such as OnFirstBoot here, can be called from anywhere in any .dic file by using \![raise]. A function that does NOT, however, can only be called within that .dic file, I believe. You can create your own On functions all over the place if you want, there's just a difference between OnDoodlebop and Doodlebop, if you get me. See the walkthrough page about coding for more about creating functions.
//***********************************************************************


//--OnFirstBoot--

//OnFirstBoot is, as you can probably guess, what happens when your user first boots up your ghost. This is where you'll want to set up an introduction and ask your user for information your ghost will need, like their name and what pronouns they'll be using. This will only run the first time they are booted!

//*********************Advanced User Info*******************************
//Because this only runs once and under an odd set of circumstances, it can be hard to test if this function is working properly. Trying to run the entire function using \![raise,OnFirstBoot] will instead bring up your alternate dialogue, so sadly you can't check it that way. Because OnFirstBoot has the / slash I talked about in the walkthrough page on scripting, you can't run it very easily through Script Input either unless you do so in pieces, and you won't be able to check your menu options. You CAN however paste it all into your Test Variable in menu.dic, so you can try that instead to test it properly. Only paste your dialogue/choices, not the values, and make sure to delete it from the test variable when you're through.

//If you're going to be adding new variables and values and such, make sure you define them all in OnFirstBoot! You can make any value you want, but it has to equal SOMEthing to exist at first. Then you can do whatever with it.
//***********************************************************************


OnFirstBoot
{
//OnFirstBoot begins with some code at first to define some values your ghost will be using. I'll briefly touch on what they are, but for the most part you should not need to edit any of these and you can safely ignore most of them (except nowshell if you've changed your shell folder's name from default_shell). Definitely don't delete them unless you know what you're doing.

 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	passmin = 0 
	passsec = 0 // These two keep track of the time.
 	username         = "USER" //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	// Sets their being-pet state to zero.
 	teachusername    = 0	// Related to them learning your name.
	mikireflag       = 0	// Determines behavior at certain points.
 	aitalkinterval = 400 //Their default talk rate.
 	birthdayprint = "????" //A temporary value for the user's birthday.
	talktime = "5 minutes" //How the value aitalkinterval will display in the config menu.
	deleteshitai = "OFF" //Sets whether or not the user can uninstall the ghost to "OFF". The user can change it later in the config menu (see menu.dic). 
	nowshell = "master" //This is for a special if check in aitalk.dic to see what shell the ghost is using. You should use the name of your default shell folder here.

	CharlieLoveRate = 0 //how much charles likes you
	CurrentHitRate = 0 //Current hit rate
	PetRate = 0 //pet rate
	HitRate = 0 //overall hit rate
	
	if reference0 == 0 //Don't touch this line.
 	{
		//---- Alright, here is where the dialogue for your ghost begins! Again, I hope you've studied up on the walkthrough's guide to dialogue coding! However, there are a few unique things about this first conversation that you should keep in mind.
		//Unlike most dialogue, it should start with "\![enter,passivemode]". Passivemode basically ensures that the balloons won't disappear, the choices won't time out, the ghosts won't talk randomly, you can't bring up menus, and makes sure that this dialogue plays through to the end correctly. This is one of the very few instances you'll ever use it, so make sure to get out of it at the end! I'll tell you when, so don't worry.
		//You'll also notice that this dialogue is black instead of grey. This is because of the use of the backwards slash as mentioned in the advanced section of the SakuraScripting page. Do you see near the bottom where it has \n\n[half]/ with the other slash at the end before the choices are listed? You will want to replace dialogue up that \n\n[half], but do not mess with the choices beyond that unless you know what you're doing.
		//Always make sure to keep your dialogue in the quotation marks! And remember, you can't use quotation marks IN dialogue either. You can use two single apostrophes instead if you must. And REMEMBER what I said about \![enter,passivemode]! Do NOT delete that tag!
		
		"\![enter,passivemode]\0\s[24]Huh? What??\x\c\s[2]Where am I? Who are you? \w8\cWhat are you?\w4\x\c\s[3]Actually, maybe it's not the best idea to ask that...\w4 uhm...\w4\x\cSorry for being so rude!\w4\nLet me try again:\w8\x\c\s[0]...My name is Charlie Calvin! \w8You can call me Charles though.\x\c How should I refer to you?\n\n/
		\w5\_q\![*]\q[He/Him/His,choicefirsthehim]\n/
		\![*]\q[She/Her/Hers,choicefirstsheher]\n/
		\![*]\q[They/Them/Their,choicefirsttheythem]\e"
		
		//There's a lot going on here, but what you mostly need to remember is to enter Passivemode at the beginning, and make sure not to touch the bottom part that starts with \w5\_q where the options are set up. Do whatever you like with the rest of the dialogue though! Make sure to set up poses for both characters right when you start, otherwise one will be invisible until they speak.
		//Note also the use of the \x and \c tags. Read more about them in the intermediate SakuraScript section of the walkthrough if you're curious.
		
		//*********************Advanced User Info*******************************
		//You can rename the choices at the bottom anything you like. The basic structure of a choice goes like \q[Displayed Name,Linkedfunction]. So for example, \q[Do a Dance,danceitup] would display "Do a Dance" in the balloon and it would link to the function titled "danceitup".
		//Note - Do not include quotation marks in the displayed name, or any other symbols like brackets or dialogue coding like \_a, since that'll break the option in the balloon. If you do this you'll notice pretty quickly. Also option names do not word wrap, so don't make them too long if your balloon is small.
		
		//If you remember my note from above about the difference between On functions, this is one place it comes up. If your linked function in this menu doesn't start with On, like danceitup up there, you'll have to preface it in the following code with Select.danceitup. You can see this at work below here. However, if it does have On, such as OnDanceitup, then you can simply name the function in the code as OnDanceitup. Take a look whenever functions are defined and how they're called in the files,and it should come together for you.
		
		//If you link to a function that doesn't exist, the ghost will do nothing. This can be handy for "Cancel" type functions, just point it at something that doesn't exist if you don't want to have a specific bit of cancel dialogue.
		
		//If you want your ghost to just refer to your user as "they" and want to skip the pronoun business altogether, then you can just delete the choices and end the dialogue with \e. You'll want to go into menu.dic and delete the pronoun choice option from the config menu as well.
		//***********************************************************************
 	}
	else
 	{
		//---- This is dialogue for when the user uninstalls the ghost for whatever reason, then reinstalls them again. They will run this dialogue instead of their normal dialogue above. You can change this to reflect the fact the user's uninstalled your ghost once, or you can make it the same as the above, it's up to you. You'll see this if you try to run OnFirstBoot using ![raise].
 		{
 		"\![enter,passivemode]\0\s[24]Huh? What??\x\c\s[2]Where am I? Who are you? \w8\cWhat are you?\w4\x\c\s[3]Actually, maybe it's not the best idea to ask that...\w4 uhm...\w4\x\cSorry for being so rude!\w4\nLet me try again:\w8\x\c\s[0]...My name is Charlie Calvin! \w8You can call me Charles though.\x\c How should I refer to you?\n\n/
		\w5\_q\![*]\q[He/Him/His,choicefirsthehim]\n/
		\![*]\q[She/Her/Hers,choicefirstsheher]\n/
		\![*]\q[They/Them/Their,choicefirsttheythem]\e"
		}
 	}
}

//Below are the choices that were defined at the end of the OnFirstBoot dialogue up there. These define the values your ghost will be using for pronouns according to what the user selected. On the whole, you should not need to touch these.

//*********************Advanced User Info*******************************
//Notice that after the values are set, there's a -- and then it loads up the next function in the sequence. You can use this basic method to set many values at once, then go to the same function afterwords.

//To define a value, you use a single = mark. If it's a word, you need to put it in quotation marks, but if it's a number, you do not. See the walkthrough page on coding for details.

//Notice how each choice is formatted as Select.choice. This is what I was talking about above with the difference between OnFunction and Function. These choices do not start with On, so they must begin with Select. instead. If you're setting up some quick choices for a menu you're only going to do once, then don't be afraid to use select. instead of having everything start with On.
//***********************************************************************

Select.choicefirsthehim
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	--
	NameInput
}

Select.choicefirstsheher
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	--
	NameInput
}

Select.choicefirsttheythem
{
	himher = "them"
	heshe = "they"
	hisher = "theirs"
	--
	NameInput
}


//--NameInput

//NameInput is the next step in our introduction sequence. Now that the ghost has the pronouns set properly, they can ask the user for their name. It's done in this order so they'll know what prefixes will be appropriate for their name, like Mr. to he/him for example.

//*********************Advanced User Info*******************************
//Note this functions' name. This isn't a natural function included in the ghost, it's a piece of dialogue created by the original base coder to finish this sequence (cindysuke). I point this out to show you that you can do this too! You can create any number of functions just like this called whatever you want to do and say whatever you want! There are many things you can do with your Ghost if you're creative. Don't feel limited by what's in these files or the listed Shiori functions!
//Just make sure you test them and they work, alright? I wrote more about coding and functions in the coding page for the walkthrough.
//***********************************************************************

NameInput
{
	//Note that there's a \![leave,passivemode] tag in this dialogue! Don't forget about this! If you leave them in passivemode they won't talk at all and it'd sort of defeat the purpose, right? I actually forgot this for a while with Hunter and Smoker and didn't notice because OnFirstBoot only runs once, so it took me some testing to find out what was wrong. Always make sure to leave passivemode when you're done with it!
	
	"\0\s[6]Ah, okay! Thank you!\x\c\![leave,passivemode]\w8\0\s[6]May I ask what your name is too? \![open,inputbox,OnNameTeach,-1]\e"
	
	//At the end of this dialogue there's a tag saying "\![open,inputbox,OnNameTeach,-1]". It basically leads to the naming function defined in nameteach.dic, so don't touch it. Make sure it's there though! Otherwise your user won't have a way to put in their name. :o
	
	//*********************Advanced User Info*******************************
	//What this tag basically means is that you're calling a function at the end of the dialogue with the \! tag, you are telling it to open, you're telling it to open an inputbox, and you're telling that inputbox to link to a function called OnNameTeach, which is in the nameteach.dic file. Remember what I said about On functions? I talked a bit about this in the SakuraScripting walkthrough page and the coding page.
	//The -1 at the end determines how long the box will be open until it times out. -1 means it shouldn't time out at all, I think.
	//***********************************************************************
}

//--GetTimeSlot

//This is another unique function to tell what time of day it is. This is used for specialized dialogue related to the day. If you're uninterested, just ignore it. Either way, don't touch it. If you are going to use it though, make a note of the names used for each chunk of time, like earlymorning or lunch. Those are the names you'll be using later.

GetTimeSlot
{
	if hour >= 5 && hour <= 8
	{
		"earlymorning"
	}
	elseif hour >= 9 && hour <= 11
	{
		"morning"
	}
	elseif hour >= 12 && hour <= 14
	{
		"lunch"
	}
	elseif hour >= 15 && hour <= 17
	{
		"afternoon"
	}
	elseif hour >= 18 && hour <= 20
	{
		"evening"
	}
	elseif hour >= 21 && hour <= 24
	{
		"latenight"
	}
	else
	{
		"midnight"
	}
}
//*********************Advanced User Info*******************************
//Do you see how this function is determining what time of day it is? It's using larger than/smaller than operators to isolate a range of time to define. For example, "hour >= 21 && hour <= 24" defines an hour that's greater than/equal to 21 AND less than/equal to 24. You can use this basic method to define other things too, such as the seasons. Keep this in mind! You never know when it might come in handy. I talk about operators more in the coding walkthrough page.
//***********************************************************************


//--GetDaySlot

//Like the above, but to find out what day it is. You can primarily use this for specialized dialogue on certain days, like the user's birthday. Either way, don't touch it.

GetDaySlot
{
	"%(month)month %(day)day"
}


//-----------------------Normal Booting----------------------------

//From this point on, the dialogue will be for any normal boot of your ghost. You can specialize this for certain days or times if you like, or if you're uninterested, leave it very simple.


//--OnBoot

//As you can probably guess, OnBoot runs when you boot your ghost. It will run every time you boot your ghost, as a matter of fact.

//*********************Advanced User Info*******************************
//If you're defining new values that depend on what you were doing with your ghost (like say, if you've hit them, if they're in a certain mode of some kind) and are generally temporary, remember to put them in OnBoot and set them back to zero or off. For example, I have a counter in the Hunter Smoker ghost that keeps track of if you've hit one of them so that when you go into their menus, it will know to give you the option to apologize or not. So I made sure to add a hunterpunchcount = 0 tag at the beginning of OnBoot, that way when you boot them up, they start fresh and don't display the option if you haven't done anything wrong yet. It's unlikely this'll come up very much if you're not interested in expanding your ghost, but I'm making a note of it here anyway for enterprising developers, huge success.
//***********************************************************************

OnBoot
 {
	lastTalk = "" //These values you may recognize from OnFirstBoot up there. Just pay them no mind.
	passmin = 0
	passsec = 0
	CurrentHitRate = 0
	
 	"\0\s[0]" //This sets them up in their neutral pose for now.
	
	//If you don't want to deal with individual day messages when you boot them, you can delete everything down to the end bracket for OnBoot (use Notepad++'s bracket tracking abilities to find where it is!) and instead add "%(normalboottalk)" to the end of the snip of dialogue up there that sets them up in their neutral poses. I'm pretty sure that should shortcut it properly.  Otherwise, read on ahead!
	--
	dayslot = GetDaySlot
	timeslot = GetTimeSlot //You should remember these functions from above! They determine the date and time. Basically, it's using the functions GetDaySlot and GetTimeSlot to determine the two values for dayslot/timeslot that it will use in the following if statements. Those who read the coding page of the walkthrough and are interested in using your own functions, pay very close attention to this and study how it works!
	
	if dayslot == userbirthday //Now we're getting into the if statements. These check what the date is and, if it's a certain value, displays special dialogue. Here, the if statement is looking at the dayslot value (which we just defined) and evaluating it using the == operator to see if it equals another value, in this case the value "userbirthday". Basically this is checking to see if it's the user's birthday.
	
	//*********************Advanced User Info*******************************
	//If you're checking a value in an if statement, remember! 
	//= will define a value, so if you put blah = 90, it will change blah to 90.
	//== will check the value in an if statement, so if you put blah == 90, it will check if blah equals 90.
	//This tripped me up at first, so keep it in mind!
	//***********************************************************************
	
	{
				"\0\s[6]It's %(bornmonthprint) %(borndayprint)! That means it's your birthday, %(username).\s[5]\n Happy Birthday, Buddy!\n I hope you're having a fantastic day!\e" 
				
				//Notice in this dialogue that there are two new envelopes, %(bornmonthprint) and %(borndayprint). These two things basically display the user's birthday - bornmonthprint is the month and borndayprint is the day. These were defined when the user put in their birthday in the menu.dic file. See word.dic for more info on envelopes.
				//If the user didn't or hasn't put in their birthday yet, this dialogue will basically never get called. Which makes sense.
	}
	//*********************Advanced User Info*******************************
	//elseif may be a unique function to AYA, I'm not sure, but anyway, the name itself is pretty self-explanatory. elseif statements always go after an if statement, and essentially are just what they sound like... if this thing happens, do this; else, if this thing happens, do this. elseifs are good if you have multiple things you want to check for in one function, like multiple days of the year as we're doing right now. elseifs go in descending order, so it'll always check if one is true, then if two is true, then if three is true, and so on.
	//***********************************************************************
	elseif dayslot == "12month 25day"
	{
				"\0\s[2]Oh my gosh!!!\nIt's Christmas day!\x\c\s[5]I hope Santa has brought you everything you want this year!\e"
				
				//You can see how these basically work. You can add in new elseif statements along these same lines with your own dayslots if you want to have them say things for all sorts of days. You can also change these existing ones I put in as examples to other dates, like your character's birthdays, perhaps. This is up to you! If you don't care about this, you can delete all the elseifs and just leave the one for the user's birthday.
	}
	else
	{
		"%(normalboottalk)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
	}
}


//--normalboottalk

//This is another unique bit of coding from cindysuke's ghost. OnBoot above checks for the day when you open them, but normalboottalk will vary their dialogue in a few different ways depending on the time and weekday. If you don't want to use these, you can delete everything under normalboottalk and write your own lines of general boot dialogue, so it'd look something like.

//normalboottalk
//{
//[insert your general boot dialogue here]
//}

//Otherwise, just replace the upcoming pieces of dialogue with what you like.


normalboottalk
{
	if RAND(100) < 60 //What this does is choose a random number from 1-100, and then checks if that number is less than 40. If it's less than forty, then these dialogue pieces will occur. Remember, you can have multiple lines of dialogue within one set of brackets like this! You just need to make sure they're all enclosed in their own set of quotation marks.
		{
			if CharlieLoveRate >=0
			{
				"\0\s[24]Woah\w8, woah\w8, woah!!!\n\s[4]Gosh...\w8\w8 I can never get used to that landing...\x\c\s[6]Anyways, wassup %(username)!!\e"
	
				"\0\s[8]Question...\nDo you think Henry would like the pink or blue paint better?\w8\w8\s[3] Wait! You may tell him!\c\s[4]Forget I said anything!\e"
	
				"\0\s[0]Ah, hello again %(username)!\s[6] Nice to see you!\e"

				"\0\s[6]%(username)! You look lovely today! Have you done something different to your look?\e"

				"\0\s[23]Ahhh hii! Gosh, ahahaha!\w4 Henry just told me the best joke!\w4Wait!\w4 Wait!\w4 Wait!\w8 I'll tell you it just\w4 let catch my breath!\w8\x\c\s[2]Oh, uhm.\s[1] I forgot how he phrased it...\e"

				"\0\s[7]I can't believe that!\w8 I lost a piece for one of my model planes...\w8 Ah,\s[4] sorry %(username), hello.\e"
			}
			else
			{
				"\0\s[4]Ah... Back here with you... Hello, %(username)...\e"

				"\0\s[9]Great. Hello, %(username).\e"

				"\0\s[0]%(username), hello.\e"

				"\0\s[2]Oh!!!\n\s[0]Hello!\e"
			}
		}
	if weekday == 6 && hour >= 19 //This checks if the weekday equals six, meaning saturday AND (using the && operator) if the hour is past 19. You can change these numbers or values to anything you like! As such you can check any combination of date and day and time for potential boot dialogue. You can also add more elseif checks for other days if you want.
		{
		"\0\s[6]It's a Saturday night! Prime time for parties, right?\w8\w8\nI've never been a party guy myself but, they seem fun!\e"

		"\0\s[0]Good evening, having a nice Saturday night? I was just locking up the shop, we close at 6 but\s[4]\w8 I had a lot of cleaning to do today...\e"

		"\0\s[5]Saturday is almost over! That means the weekend begins!\s[3]\w8 \nOh! Well...\s[6]\w8For me anyway, my shop is closed on Sundays!\e"

		"\0\s[6]Good evening, %(username)! You not a party-person? That's what people do on Saturday nights\w8,\s[3] right?\w8\n\s[I never did but, it certainly seemed like a fun option!\e"

		"\0\s[8]I always found Saturday night was the best time to stay at home...\w8 \s[1]Can you imagine? Me, Henry, a big blanket and some hot drinks\w8, maybe tea.\s[6]\nThat sounds amazing...\e"
		}
 	else
 	{
		//The following if statements check the time of the day as defined above in the GetTimeSlot function. Do you remember the names that it defined? Now we're going to use them!
		
		if timeslot == "earlymorning" //The following dialogue will be called if they are booted during the time specified in GetTimeSlot (in this case, the hour being more than/equal to 5 but less than/equal to 8). Remember, you can add as many lines of dialogue here as you want, or take away as many as you want! Replace the dialogue here with what you see fit.
		{
		"\0\s[2]Oh! Are you an early bird too?\s[5] I do love my mornings!\e"
		
		"\0\s[6]Howdy, %(username)! It's always nice to see a freindly face first thing in the morning!\e"
		
		"\0\s[4]Ah, heya...\w8\w8 Sorry, uh, I haven't been having a great morning...\nI'll try my best to do better.\e"

		"\0\s[6]Good morning, sunshine! Nice to see you so early!\e"

		"\0\s[6]Hello, %(username). Lovely this time in the morning, huh?\e"
		}
		elseif timeslot == "morning"
		{
		"\0\s[0]Good morning, %(username)\e"
		
		"\0\s[6]Pleasant morning isn't it, %(username)?\e"

		"\0\s[0]Hello, %(username)! Have you had breakfast yet?\e"

		"\0\s[0]Morning, buddy! Have you had anything to drink yet?\e"

		"\0\s[6]Ah, hello %(username)! Quite a nice morning today, hm?\e"

		"\0\s[8]Howdy, %(username)! What do you think I should have for breakfast?\w8 What did you have for breakfast?\e"
		}
		elseif timeslot == "lunch"
		{
		"\0\s[2]Oh! It's lunchtime already?\e"
		
		"\0\s[0]Howdy, %(username)! Have you had lunch yet, bud?\e"

		"\0\s[6]Midday! How lovely, you've made it through the middle of the day already!\e"

		"\0\s[0]Hello, %(username)!\e"

		"\0\s[2]Oh my gosh! I forgot to have lunch! I should do that!\e"

		"\0\s[6]Heyo!! Midday drives are the best, we should go on one sometime %(username).\e"
		}
		elseif timeslot == "afternoon"
		{
		"\0\s[6]Good afternoon, %(username)!\e"

		"\0\s[6]Heyo, %(username)! Don't you think the afternoon sun is lovely?\e"

		"\0\s[0]Hello again! Are you having a nice afternoon?\e"

		"\0\s[4]Good afternoon... It's kinda grumpy outside for me...\e"

		"\0\s[0]Howdy, %(username)! Have you had a drink recently?\e"
		}
		elseif timeslot == "evening"
		{
 		"\0\s[0]Good evening, %(username)!\e"

		"\0\s[5]Good evening, is it movie night?\e"

		"\0\s[0]Hello, bud! Have you had dinner yet?\e"

		"\0\s[6]Howdy, %(username)! We having a girls night?\e"

		"\0\s[8]Heyo! Do you fancy a hot drink because, I do!\e"
		}
		elseif timeslot == "latenight"
		{
 		"\0\s[3]Ooh! It's a little late isn't, %(username)?\s[0]Hello anyway though!\e"
		
 		"\0\s[8]Did you get round to having dinner, %(username)?\e"
		
 		"\0\s[6]Oh! Why hello, %(username)!\w8 I was just going to get a drink! Maybe you should too!\e"

		"\0\s[2]%(username)?? You okay?\s[0] I was on a date with Henry so, I hope this is somewhat important...\e"

		"\0\s[0]Howdy, %(username)! How's this lovely evening going for ya?\e"
		}
		else //the last timeslot we haven't done is midnight, which is what's under here.
		{
		"\0\s[8]Hmmm... Do you think the stars are out tonight?\e"
		
 		"\0\s[8]It's so peaceful at night sometimes...\s[6] I get why you're up at this time of night...\e"
		
 		"\0\s[4]Howdy there, Bud! It's a bit late,\w8 you doing alright?\w8 Lonely...?\w8 That's okay! I'll stay with you!\e"

		"\0\s[2]%(username)??\s[4] Isn't it a little late to be asking me here?\w8\w8\w8\c\s[0]Anyways, hello bud.\e"

		"\0\s[6]Good morning, %(username)!\w8\w8\s[2]Wait-\x\c\s[1]Gosh, sorry! Good evening, boss!\e"
		}
	}
}


//--OnClose

//OnClose runs when you close your ghost. Like OnBoot, this can be customized for times and days if you like, as you saw above. It can also be easily simplified down to
//OnClose
//{
//[insert your dialogue here]
//}
//if you don't want to deal with the time slots. Although do note, close dialogue must end with a \- instead of \e. \- will close the program.
//Like above with OnBoot, just replace all the following pieces of dialogue with your own. It feels a bit redundant for me to point out every single piece and say "replace this", you know? If you've read the SakuraScript walkthrough page, you should know what a piece of dialogue looks like by now within code. Just go through OnClose and replace each bit with dialogue more suited for your ghost.
//Note though that each bit here ends with \w8 instead of \e. That's because the actual end statement to close the ghost is at the very end, one of the very very rare times you won't have to end a line with \e. Instead, end it with \w8 so there's a little bit of a pause for the user before your ghost closes so they can read the last message.

OnClose
 {
 timeslot = GetTimeSlot //as you saw above, it's checking the time.
 --
	if passmin >= 5	//This checks to see if you've had them open for at least five minutes.
		{
			if RAND(100) < 50 //see above about the random number generator
			{
				if CharlieLoveRate >=0
				{
					"\0\s[0]Oh? You've got to go?\s[6] Okay! I'll see you later then, bud!\w8\w8"

					"\0\s[6]You're going? Coolio! See you later, %(username)!\w8"

					"\0\s[0]Ohhhh, you're leaving! Okay! Byebye!\w8"

					"\0\s[3]Good timing too, I have a bad feeling about my shop. I should check on it now!\w8"

					"\0\s[0]Ah, okay! good luck with the rest of your day, buddy!\w8"
				}
				else
				{
					"\0\s[6]Ah, that's great! I'm going to go and see Henry!\w8\w8\n\s[9]Not that you need to know...\e"
					"\0\s[0]Alright! Bye, %(username)!\e"

				}
				
			}
			else
			{
			if timeslot == "earlymorning"
				{
					"\0\s[6]Goodbye! Have a nice morning!\w8"
					
					"\0\s[0]Lots of the day ahead, huh? Good luck and I'll see you later!\w8\w8"

					"\0\s[6]Got a long day ahead? Good luck, buddy!\w8"

					"\0\s[5]We splitting at the same time? Awesome! Good lucl with your day!\w8"

					"\0\s[0]Time to open up shop myself so, see ya later %(username)!\w8"
				}
			elseif timeslot == "morning"
 				{
 					"\0\s[0]See ya! Have a nice breakfast!\w8\w8"

					"\0\s[6]Ah okay! Byebye, have a nice morning!\w8"

					"\0\s[0]Ooohh! Good luck with the last of your morning, %(username).\w8"

					"\0\s[0]Byebye, don't forget your breakfast!\w8"

					"\0\s[6]Almost time for my first break of the day, fun! Shame you couldn't join me for it. See ya!\w8\w8"
 				}
 			elseif timeslot == "lunch"
 				{
 					"\0\s[0]Byebye! Have a nice lunch!\w8"
					
 					"\0\s[0]See you later, %(username)! Have a nice lunch!\w8"

					"\0\s[5]Ah, I'm super hungry! I'm gonna go get myself some pasta! See you later!\w8"

					"\0\s[6]Lunch time here we come! See you in a bit, %(username)!\w8"

					"\0\s[0]Ah okay! Don't forget to have lunch though! Bye!\w8"
 				}
 			elseif timeslot == "afternoon"
 				{
 					"\0\s[0]Adios, dear %(username).\w8"
					
 					"\0\s[0]Have a nice afternoon and we'll chat later!\w8"

					"\0\s[6]Okiee, see you later! Don't forget some afternoon water!\w8"

					"\0\s[6]Byebye, dear %(username)! Have a nice afternoon!\18"

					"\0\s[6]Alrighty! Make sure to enjoy the rest of the afternoon sun!\w8"

 				}
  			elseif timeslot == "evening"
 				{
 						if weekday == 6 //here, a nested if statement is checking that if it's evening, is it also saturday? You can do this to check more specific times on other days as well. You can change this to some other day if you want, or just delete this little if/else section entirely and write your own evening related close dialogue.
 						{
 							"\0\s[0]You're going?\s[6] Okay! Have a nice Saturday night! Chill if you can!\w8"

							"\0\s[6]Ah, Saturday night to myself!\s[5] But, not really.\w4 I'm going to go bother Henry! See ya later!\w8\w8"

							"\0\s[8]Hmm, I'm not working tommorrow so maybe I can do something fun tonight... Anyways, byebye for now %(username)!\w8"
 						}
 						else //if it's not saturday, then it'll do this dialogue instead.
 						{
 							"\0\s[0]Ooh? An evening away, I could do with that too! Gonna call Henry and see if he wants to join me!\w8"
							
 							"\0\s[0]Have a nice evening, %(username)!\w8"

							"\0\s[0]You're going?\s[6] Okay! Have a nice evening!\w8"

							"\0\s[0]Ah, okay! Good night-\s[2] Wait\s[3]- Is night right?\n Have a nice evening, %(username).\w8"

							"\0\s[0]Byebye, don't forget to have dinner!\w8"
 						}
 				}
			elseif timeslot == "latenight"
			 	{
						
 						"\0\s[0]You should probably start thinking about going to sleep now, %(username)! I hope that's what you're going off to do! Byebye!\w8"
						
						"\0\s[8]Hm... I could use a nap, you're right! See ya later, %(username)!\w8"

						"\0\s[6]I think it may be bed time for me soon, good night %(username)!\w8"

						"\0\s[1]Cool, awesome! I'm gonna go see my theif now so, I'll see you later!\w4"

						"\0\s[0]I'll see you later, %(username)! Have a nice rest of the night!\w8"
 				}
			else //like above, this is the midnight time slot since it's the last one left.
 				{
 						if weekday == 0 //checking if it's the middle of the night on Sunday
 						{
 							"\0\s[0]Ah, gosh are you going bed now? I hope you haven't got anything important going on Monday...\w8"

							"\0\s[3]Good night, Pal! I wish you luck for whatever Monday brings...\w8"

							"\0\s[0]I hope you get enough sleep ready for the beginning of the week... Good night\w8"
 						}
						"\0\s[0]Oh? You're going?\s[6] Okay! I'm going to stop off at Henry's, it's\s[3] uh...\w4 a closer walk...\w8"
						
						"\0\s[6]Great idea! You should sleep and I really miss Henry!\w8"
						
						"\0\s[0]I'm tired too... Good night, %(username).\w8"

						"\0\s[4]I'm knackered... Enjoy the rest of your night, %(username)!\w8"

						"\0\s[4]Awesome sauce, I'm gonna go crash at Henry's. I miss him.\w8"
				}
			}
				
 		}
 		
 		
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
 		"\0\s[0]Oh! You're a little too busy to talk?\s[4]That's okay! I'll see you later then!\w8\w8"
		
 		"\0\s[0]Ah, changed your mind? That's cool, I'm gonna go back to the shop then! See ya!\w8\w8"
 	}
 	--
	"\-\e" //this bit of code actually closes and ends the ghost. Because \e is here, you don't have to end each line above with it. Again, this will come up very rarely, so OnClose is an unusual case.
 }


 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way.
 

//--OnWindowStateRestore

//This will run when you minimize them and then bring them back up. Replace with what you like.

OnWindowStateRestore
 {
	"\0\s[4]Opps, was I hiding something important?? I'm sorry.\e"
}


//--OnGhostChanging

//This runs whenever you change or reload the ghost. You can change ghosts by going into the right click menu and going to Change Ghost, but this dialogue will also be called if you reload them using Utilities->Reload Ghost. Protip: If you are going to make a ghost, you will be reloading it A LOT.
//Note: If you reload your ghost using the developer console instead of Utilities->Reload Ghost, it won't do this dialogue, so don't freak out if it doesn't show up.
 
OnGhostChanging
 {
	if reference0 == "Charles Calvin" //Replace this with the name of your Sakura character as you put in install.txt or descript.txt. I set this up to use the full ghost's name with Hunter and Smoker but I forget exactly how I did it and I'm having trouble getting it to work again. I think I just didn't define the Sakura or Kero names in either descript.txt or install.txt. You can experiment with it yourself. Otherwise, leave it as your Sakura character's name.
	{
		"\0\s[0]Oh, sorry! Give me a moment, I'll be right back!\w8\w8\e"
		//Replace this dialogue with whatever you like.
	}
 	else //If you're switching to another Ghost.
	{
		"\0\s[0]Oh, you wanna see %(reference0)?\n\s[6]Sure! I'll see you sometime later then, I guess?\e"
		
		//Replace this dialogue with whatever you like. Notice the use of the %(reference0) envelope here? In OnGhostChanging, %(reference0) stores the name of the ghost being swapped to, so if you want to display what you're switching to, you can use %(reference0) as in this example. You don't have to use %(reference0) if you don't want to though.
	}
}


//--OnGhostChanged

//A sister to the above, this runs after the ghost has either reloaded itself, or when you switch from another ghost to this ghost.

OnGhostChanged
{
	"\0\s[0]" //this sets up their default poses
	--
	if reference0 == "Charles Calvin" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{
		"\0\s[0]Okay! I'm back! Sorry about that.\e"
	}
	else //If you're switching to them from another ghost...
	{
		"\0\s[6]Bye Bye, %(reference0). I'm sure %(username) and you, will chat again later!\e"

		//Again, %(reference0) in this function is the name of the ghost in question. As above, replace these two lines of dialogue what what'd be appropriate for your ghost.
	}
}


//--OnShellChanging

//This will run when you change your ghost's shell. If you don't have any other shells for your ghost, you can safely ignore this but don't delete it, you might as well keep it just in case. I probably won't add a different shell to this template because shells are a lot of work ugh, but for the sake of argument, let's pretend I did.

OnShellChanging
 {
	if reference0 == "Hypothetical Shell that doesn't actually exist" //reference0 in OnShellChanging is the name of the shell you're swapping to. It should be defined in the descript.txt file in your shell folder. If you do have alternate shells, put in the right name here.
	{
	"\1\s[10]This dialogue is specifically for changing to this particular shell.\w8\0\w8\s[9]It totally exists.\w8\e"
	//Then rewrite this line as appropriate.
	}
	else //if you don't have any specific dialogue for a specific shell
	{
	"\0\s[0]This dialogue is for changing shells.\w8\1\s[10]Sure is.\w8\e"
	
	"\1\s[10]This is another bit of dialogue for changing shells.\w8\0\s[8]I wonder how many people will actually have multiple shells?\e"
	
	//Rewrite these two lines as you need.
	}
 }
 
 
 //--OnShellChanged
 
 //The sister to the above, this is the dialogue after you've changed the shell.
 
OnShellChanged
 {
 	if reference0 == "GT Default Shell" //Again, this is the name of your shell as you put in the descript.txt file for that shell.
 	{
 		nowshell = "master" //This is the folder name for your shell. Not the same as the above! 
		
 		"\0\s[0]This dialogue is for switching to our default shell.\w8\1\s[18]No really, will anyone actually put in the work to use these functions?\w8\0\s[9]\n\n[half]Shh.\e"
		//Replace dialogue as required.
 	}
 	elseif reference0 == "Hypothetical Shell that doesn't actually exist" //You can use as many elseifs for as many shells as you've got.
 	{
 		nowshell = "totallyrealshell"
		
 		"\0\s[0]This dialogue is for switching to that hypothetical shell.\e"
		
 		"\0\s[0]This is another bit of dialogue for switching to this hypothetical shell.\w8\1\s[18]Man if you actually use this, you should tell Zar, it'll blow her mind.\w8\0\n\n[half]\s[9]Shut up, we're not supposed to be in-character here.\e"
		//Replace these bits with whatever you have in mind.
 	}
 	elseif reference0 == "Another totally real shell wow"
 	{
 		nowshell = "thiswouldbesomuchwork"
		
 		"\1\s[10]This dialogue is after we've switched to another totally real shell.\e"
		//Replace this as well.
 	}
 	else //For any shell without a specific name, or if you don't want to bother with individual responses to a shell.
 	{
	"\0\s[0]This dialogue is after we've changed our shell to %(reference[0]).\w8\1\s[18]How many shells you got?\e"
	
	//Note the %(reference[0]) here! This time that should store the name of whatever shell you're switching to. To be honest, I have not experimented with this too much because making shells is a pain in the tuckus, but I'm going to take cindysuke's coding on faith and assume reference[0] is correct instead of reference0. Replace this bit of dialogue as you need.
	}
 }


 //--OnDressupChanged
 
 //This runs whenever you fiddle with their clothing via the dress-up option, if you've set any for your ghost. Honestly setting up clothing is a nightmare and I hate doing it, and if your ghost is going to be moving around substantially or at all, clothing won't stay in the right place anyway. So unless you're like a real expert on surfaces.txt coding and rigging up clothing for different poses or you're intense or dedicated enough to set up clothing in the right place for every pose you do, I would not bother with clothing for your ghost.
 //HOWEVER I can't begrudge people who actually would put in that effort! And in that case, this function is for you. For now, I'll fill this in with some hypothetical items. Replace the dialogue below with whatever you need.

OnDressupChanged
{
if reference0 == 0 //in OnDressupChanged, reference0 refers to the character, therefore this is evaluating which character in question is getting dressed up. 0 is the main character, as you know from the walkthrough by now.
	{
	if reference1 == "Clothing for Girl" //This is the name of the clothing item in the descript.txt file, I'm pretty sure.
		{
			if reference2 == 1 //This checks if you're putting it on.
			{
			"\0\s[0]You put my clothing item on me.\w8\1\s[19]lol like zar would ever bother with clothes for a ghost.\w8\0\s[9]\n\n[half]Shut up dude you're going to get us in trouble.\e"
			}
			else // This checks if you're taking it off.
			{
			"\0\s[0]You took the clothing item off.\e"
			}
		}		
	}
else //if reference0 isn't the main character, then it has to be the side character.
	{
	if reference1 == "some kind of clothing for triangle??" //The name of the item of clothing in the descript.txt file in your shell folder.
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I'm wearing some kind of clothing.\w8\0\s[8]Maybe a hat?\e"
			}
			else //When you take it off.
			{
			"\1\s[10]You took off some kind of clothing.\e"
			}
		}
	elseif reference1 == "i'm gonna say a propeller beanie" //As you've seen above, you can use elseifs to expand the list if you have more than one item.
		{
			if reference2 == 1 //if you're putting it on
			{
			"\1\s[10]You put a hat on me.\w8\0\s[6]lol.\w8\1\n\n[half]\s[11]Shaddap.\e"
			}
			else //when you take it off
			{
			"\1\s[10]You took off the hat.\e"
			}
		}
	}
}

//If you are super dedicated to doing clothes, I'd recommend checking out some more in-depth FLELE tutorials for stuff about clothing until I muster up the energy to write a walkthrough page for it.